name: Release

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          check-latest: true
      
      - name: Run tests
        run: go test -v ./...
      
      - name: Build binaries
        run: |
          # Create dist directory
          mkdir -p dist
          
          # Build for multiple architectures
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.Revision=${{ github.sha }} -X main.Branch=main -X main.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o dist/rabbitmq_exporter_linux_amd64 .
          
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.Revision=${{ github.sha }} -X main.Branch=main -X main.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o dist/rabbitmq_exporter_linux_arm64 .
          
          GOOS=linux GOARCH=arm GOARM=6 CGO_ENABLED=0 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.Revision=${{ github.sha }} -X main.Branch=main -X main.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o dist/rabbitmq_exporter_linux_arm_v6 .
          
          GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.Revision=${{ github.sha }} -X main.Branch=main -X main.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o dist/rabbitmq_exporter_linux_arm_v7 .
          
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.Revision=${{ github.sha }} -X main.Branch=main -X main.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o dist/rabbitmq_exporter_darwin_amd64 .
          
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.Revision=${{ github.sha }} -X main.Branch=main -X main.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o dist/rabbitmq_exporter_darwin_arm64 .
          
          GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }} -X main.Revision=${{ github.sha }} -X main.Branch=main -X main.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o dist/rabbitmq_exporter_windows_amd64.exe .
      
      - name: Create archives
        run: |
          cd dist
          
          # Create temporary directories for each archive
          mkdir -p temp_linux_amd64 temp_linux_arm64 temp_linux_arm_v6 temp_linux_arm_v7 temp_darwin_amd64 temp_darwin_arm64 temp_windows_amd64
          
          # Copy binaries with standard name and documentation
          cp rabbitmq_exporter_linux_amd64 temp_linux_amd64/rabbitmq_exporter
          cp ../README.md ../LICENSE ../config.example.json temp_linux_amd64/
          
          cp rabbitmq_exporter_linux_arm64 temp_linux_arm64/rabbitmq_exporter
          cp ../README.md ../LICENSE ../config.example.json temp_linux_arm64/
          
          cp rabbitmq_exporter_linux_arm_v6 temp_linux_arm_v6/rabbitmq_exporter
          cp ../README.md ../LICENSE ../config.example.json temp_linux_arm_v6/
          
          cp rabbitmq_exporter_linux_arm_v7 temp_linux_arm_v7/rabbitmq_exporter
          cp ../README.md ../LICENSE ../config.example.json temp_linux_arm_v7/
          
          cp rabbitmq_exporter_darwin_amd64 temp_darwin_amd64/rabbitmq_exporter
          cp ../README.md ../LICENSE ../config.example.json temp_darwin_amd64/
          
          cp rabbitmq_exporter_darwin_arm64 temp_darwin_arm64/rabbitmq_exporter
          cp ../README.md ../LICENSE ../config.example.json temp_darwin_arm64/
          
          cp rabbitmq_exporter_windows_amd64.exe temp_windows_amd64/rabbitmq_exporter.exe
          cp ../README.md ../LICENSE ../config.example.json temp_windows_amd64/
          
          # Create tar.gz archives
          tar -czf rabbitmq_exporter_${{ github.ref_name }}_linux_amd64.tar.gz -C temp_linux_amd64 .
          tar -czf rabbitmq_exporter_${{ github.ref_name }}_linux_arm64.tar.gz -C temp_linux_arm64 .
          tar -czf rabbitmq_exporter_${{ github.ref_name }}_linux_arm_v6.tar.gz -C temp_linux_arm_v6 .
          tar -czf rabbitmq_exporter_${{ github.ref_name }}_linux_arm_v7.tar.gz -C temp_linux_arm_v7 .
          tar -czf rabbitmq_exporter_${{ github.ref_name }}_darwin_amd64.tar.gz -C temp_darwin_amd64 .
          tar -czf rabbitmq_exporter_${{ github.ref_name }}_darwin_arm64.tar.gz -C temp_darwin_arm64 .
          
          # Create zip for windows
          cd temp_windows_amd64 && zip ../rabbitmq_exporter_${{ github.ref_name }}_windows_amd64.zip * && cd ..
          
          # Clean up temp directories
          rm -rf temp_*
          
          # Generate checksums
          sha256sum *.tar.gz *.zip > checksums.txt
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          name: "RabbitMQ Exporter ${{ github.ref_name }}"
          body: |
            ## RabbitMQ Exporter ${{ github.ref_name }}
            
            This release includes multi-architecture binaries for the RabbitMQ Exporter.
            
            ### 📦 Installation
            
            Download the appropriate binary for your platform from the assets below.
            
            ### 🏗️ Supported Architectures
            - linux/amd64, linux/arm64, linux/arm/v6, linux/arm/v7
            - darwin/amd64, darwin/arm64  
            - windows/amd64
            
            ### 📋 Usage
            ```bash
            # Extract the archive
            tar -xzf rabbitmq_exporter_${{ github.ref_name }}_linux_amd64.tar.gz
            
            # Run the exporter
            ./rabbitmq_exporter --version
            ```
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
