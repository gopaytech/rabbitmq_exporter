name: Container Cleanup

on:
  schedule:
    - cron: '0 2 * * 0'  # Run weekly on Sundays at 2 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  cleanup-old-images:
    name: Cleanup Old Container Images
    runs-on: ubuntu-latest
    steps:
    - name: Delete old container images
      uses: actions/delete-package-versions@v5
      with:
        package-name: 'rabbitmq_exporter'
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: true
        token: ${{ secrets.GITHUB_TOKEN }}

  cleanup-old-releases:
    name: Cleanup Old Pre-releases
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Delete old pre-releases
      uses: actions/github-script@v7
      with:
        script: |
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const preReleases = releases.filter(release => release.prerelease);
          const sortedPreReleases = preReleases.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
          
          // Keep the 5 most recent pre-releases
          const toDelete = sortedPreReleases.slice(5);
          
          for (const release of toDelete) {
            console.log(`Deleting pre-release: ${release.tag_name}`);
            await github.rest.repos.deleteRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
            });
            
            // Also delete the tag
            try {
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${release.tag_name}`,
              });
            } catch (error) {
              console.log(`Could not delete tag ${release.tag_name}: ${error.message}`);
            }
          }
